#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ssltest:server');
var http = require('http');
var path = require('path');
var fs = require('fs');
var https = require('https');
var ocsp = require('ocsp');
var log = console.log.bind(console);

global.appRoot = path.dirname(path.resolve(__dirname))

var cache = new ocsp.Cache();

// Should be the top level of our express app
var sslDir = global.appRoot+'/ssl/'
var privateKey = fs.readFileSync(sslDir+'example.com.key'),
	certificate = fs.readFileSync(sslDir+'example.com.crt'),
	certificateAuthority = fs.readFileSync(sslDir+'example-ca.crt');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

log('using port', port)

/**
 * Create HTTPS server.
 */
var server = https.createServer({
	key: privateKey,
	cert: certificate,
	ca: certificateAuthority,
	honorCipherOrder: true
}, app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// https://nodejs.org/api/tls.html#tls_event_ocsprequest
// server.on('OCSPRequest', function(cert, issuer, cb) {
// 	ocsp.getOCSPURI(cert, function(err, uri) {
// 		if (err)
// 			return cb(err);

// 		var req = ocsp.request.generate(cert, issuer);
// 		var options = {
// 			url: uri,
// 			ocsp: req.data
// 		};

// 		cache.request(req.id, options, cb);
// 	});
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
	throw error;
	}

	var bind = typeof port === 'string'
	? 'Pipe ' + port
	: 'Port ' + port;



	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
